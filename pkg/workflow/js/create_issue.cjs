async function main() {
  // Read the validated output content from environment variable
  const outputContent = process.env.GITHUB_AW_AGENT_OUTPUT;
  if (!outputContent) {
    console.log('No GITHUB_AW_AGENT_OUTPUT environment variable found');
    return;
  }
  if (outputContent.trim() === '') {
    console.log('Agent output content is empty');
    return;
  }

  console.log('Agent output content length:', outputContent.length);

  // Parse the validated output JSON
  let validatedOutput;
  try {
    validatedOutput = JSON.parse(outputContent);
  } catch (error) {
    console.log('Error parsing agent output JSON:', error instanceof Error ? error.message : String(error));
    return;
  }

  if (!validatedOutput.items || !Array.isArray(validatedOutput.items)) {
    console.log('No valid items found in agent output');
    return;
  }

  // Find all create-issue items
  const createIssueItems = validatedOutput.items.filter(
    /** @param {any} item */ (item) => item.type === 'create-issue'
  );
  if (createIssueItems.length === 0) {
    console.log('No create-issue items found in agent output');
    return;
  }

  console.log(`Found ${createIssueItems.length} create-issue item(s)`);

  // Check if we're in an issue context (triggered by an issue event)
  const parentIssueNumber = context.payload?.issue?.number;

  // Parse labels from environment variable (comma-separated string)
  const labelsEnv = process.env.GITHUB_AW_ISSUE_LABELS;
  let envLabels = labelsEnv
    ? labelsEnv
        .split(',')
        .map(/** @param {string} label */ (label) => label.trim())
        .filter(/** @param {string} label */ (label) => label)
    : [];

  const createdIssues = [];

  // Process each create-issue item
  for (let i = 0; i < createIssueItems.length; i++) {
    const createIssueItem = createIssueItems[i];
    console.log(`Processing create-issue item ${i + 1}/${createIssueItems.length}:`, {
      title: createIssueItem.title,
      bodyLength: createIssueItem.body.length,
    });

    // Merge environment labels with item-specific labels
    let labels = [...envLabels];
    if (createIssueItem.labels && Array.isArray(createIssueItem.labels)) {
      labels = [...labels, ...createIssueItem.labels].filter(Boolean);
    }

    // Extract title and body from the JSON item
    let title = createIssueItem.title ? createIssueItem.title.trim() : '';
    let bodyLines = createIssueItem.body.split('\n');

    // If no title was found, use the body content as title (or a default)
    if (!title) {
      title = createIssueItem.body || 'Agent Output';
    }

    // Apply title prefix if provided via environment variable
    const titlePrefix = process.env.GITHUB_AW_ISSUE_TITLE_PREFIX;
    if (titlePrefix && !title.startsWith(titlePrefix)) {
      title = titlePrefix + title;
    }

    if (parentIssueNumber) {
      console.log('Detected issue context, parent issue #' + parentIssueNumber);

      // Add reference to parent issue in the child issue body
      bodyLines.push(`Related to #${parentIssueNumber}`);
    }

    // Add AI disclaimer with run id, run htmlurl
    // Add AI disclaimer with workflow run information
    const runId = context.runId;
    const runUrl = context.payload.repository
      ? `${context.payload.repository.html_url}/actions/runs/${runId}`
      : `https://github.com/actions/runs/${runId}`;
    bodyLines.push(``, ``, `> Generated by Agentic Workflow Run [${runId}](${runUrl})`, '');

    // Prepare the body content
    const body = bodyLines.join('\n').trim();

    console.log('Creating issue with title:', title);
    console.log('Labels:', labels);
    console.log('Body length:', body.length);

    try {
      // Create the issue using GitHub API
      const { data: issue } = await github.rest.issues.create({
        owner: context.repo.owner,
        repo: context.repo.repo,
        title: title,
        body: body,
        labels: labels,
      });

      console.log('Created issue #' + issue.number + ': ' + issue.html_url);
      createdIssues.push(issue);

      // If we have a parent issue, add a comment to it referencing the new child issue
      if (parentIssueNumber) {
        try {
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: parentIssueNumber,
            body: `Created related issue: #${issue.number}`,
          });
          console.log('Added comment to parent issue #' + parentIssueNumber);
        } catch (error) {
          console.log(
            'Warning: Could not add comment to parent issue:',
            error instanceof Error ? error.message : String(error)
          );
        }
      }

      // Set output for the last created issue (for backward compatibility)
      if (i === createIssueItems.length - 1) {
        core.setOutput('issue_number', issue.number);
        core.setOutput('issue_url', issue.html_url);
      }
    } catch (error) {
      console.error(`âœ— Failed to create issue "${title}":`, error instanceof Error ? error.message : String(error));
      throw error;
    }
  }

  // Write summary for all created issues
  if (createdIssues.length > 0) {
    let summaryContent = '\n\n## GitHub Issues\n';
    for (const issue of createdIssues) {
      summaryContent += `- Issue #${issue.number}: [${issue.title}](${issue.html_url})\n`;
    }
    await core.summary.addRaw(summaryContent).write();
  }

  console.log(`Successfully created ${createdIssues.length} issue(s)`);
}
await main();
