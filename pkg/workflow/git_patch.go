package workflow

import "strings"

// generateGitPatchStep generates a step that creates and uploads a git patch of changes
func (c *Compiler) generateGitPatchStep(yaml *strings.Builder, data *WorkflowData) {
	yaml.WriteString("      - name: Generate git patch\n")
	yaml.WriteString("        if: always()\n")
	yaml.WriteString("        env:\n")
	yaml.WriteString("          GITHUB_AW_SAFE_OUTPUTS: ${{ env.GITHUB_AW_SAFE_OUTPUTS }}\n")
	// Add push-to-branch configuration if available
	if data.SafeOutputs != nil && data.SafeOutputs.PushToBranch != nil {
		yaml.WriteString("          GITHUB_AW_PUSH_BRANCH: \"" + data.SafeOutputs.PushToBranch.Branch + "\"\n")
	}
	yaml.WriteString("        run: |\n")
	yaml.WriteString("          # Check current git status\n")
	yaml.WriteString("          echo \"Current git status:\"\n")
	yaml.WriteString("          git status\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # Extract branch name from JSONL output\n")
	yaml.WriteString("          BRANCH_NAME=\"\"\n")
	yaml.WriteString("          if [ -f \"$GITHUB_AW_SAFE_OUTPUTS\" ]; then\n")
	yaml.WriteString("            echo \"Checking for branch name in JSONL output...\"\n")
	yaml.WriteString("            while IFS= read -r line; do\n")
	yaml.WriteString("              if [ -n \"$line\" ]; then\n")
	yaml.WriteString("                # Extract branch from create-pull-request line using simple grep and sed\n")
	yaml.WriteString("                if echo \"$line\" | grep -q '\"type\"[[:space:]]*:[[:space:]]*\"create-pull-request\"'; then\n")
	yaml.WriteString("                  echo \"Found create-pull-request line: $line\"\n")
	yaml.WriteString("                  # Extract branch value using sed\n")
	yaml.WriteString("                  BRANCH_NAME=$(echo \"$line\" | sed -n 's/.*\"branch\"[[:space:]]*:[[:space:]]*\"\\([^\"]*\\)\".*/\\1/p')\n")
	yaml.WriteString("                  if [ -n \"$BRANCH_NAME\" ]; then\n")
	yaml.WriteString("                    echo \"Extracted branch name from create-pull-request: $BRANCH_NAME\"\n")
	yaml.WriteString("                    break\n")
	yaml.WriteString("                  fi\n")
	yaml.WriteString("                # Extract branch from push-to-branch line using simple grep and sed\n")
	yaml.WriteString("                elif echo \"$line\" | grep -q '\"type\"[[:space:]]*:[[:space:]]*\"push-to-branch\"'; then\n")
	yaml.WriteString("                  echo \"Found push-to-branch line: $line\"\n")
	yaml.WriteString("                  # For push-to-branch, we don't extract branch from JSONL since it's configured in the workflow\n")
	yaml.WriteString("                  # The branch name should come from the environment variable GITHUB_AW_PUSH_BRANCH\n")
	yaml.WriteString("                  if [ -n \"$GITHUB_AW_PUSH_BRANCH\" ]; then\n")
	yaml.WriteString("                    BRANCH_NAME=\"$GITHUB_AW_PUSH_BRANCH\"\n")
	yaml.WriteString("                    echo \"Using configured push-to-branch target: $BRANCH_NAME\"\n")
	yaml.WriteString("                    break\n")
	yaml.WriteString("                  fi\n")
	yaml.WriteString("                fi\n")
	yaml.WriteString("              fi\n")
	yaml.WriteString("            done < \"$GITHUB_AW_SAFE_OUTPUTS\"\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # Get the initial commit SHA from the base branch of the pull request\n")
	yaml.WriteString("          if [ \"$GITHUB_EVENT_NAME\" = \"pull_request\" ] || [ \"$GITHUB_EVENT_NAME\" = \"pull_request_review_comment\" ]; then\n")
	yaml.WriteString("            INITIAL_SHA=\"$GITHUB_BASE_REF\"\n")
	yaml.WriteString("          else\n")
	yaml.WriteString("            INITIAL_SHA=\"$GITHUB_SHA\"\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("          echo \"Base commit SHA: $INITIAL_SHA\"\n")
	yaml.WriteString("          # Configure git user for GitHub Actions\n")
	yaml.WriteString("          git config --global user.email \"action@github.com\"\n")
	yaml.WriteString("          git config --global user.name \"GitHub Action\"\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # If we have a branch name, check if that branch exists and get its diff\n")
	yaml.WriteString("          if [ -n \"$BRANCH_NAME\" ]; then\n")
	yaml.WriteString("            echo \"Looking for branch: $BRANCH_NAME\"\n")
	yaml.WriteString("            # Check if the branch exists\n")
	yaml.WriteString("            if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then\n")
	yaml.WriteString("              echo \"Branch $BRANCH_NAME exists, generating patch from branch changes\"\n")
	yaml.WriteString("              # Generate patch from the base to the branch\n")
	yaml.WriteString("              git format-patch \"$INITIAL_SHA\"..\"$BRANCH_NAME\" --stdout > /tmp/aw.patch || echo \"Failed to generate patch from branch\" > /tmp/aw.patch\n")
	yaml.WriteString("              echo \"Patch file created from branch: $BRANCH_NAME\"\n")
	yaml.WriteString("            else\n")
	yaml.WriteString("              echo \"Branch $BRANCH_NAME does not exist, falling back to current HEAD\"\n")
	yaml.WriteString("              BRANCH_NAME=\"\"\n")
	yaml.WriteString("            fi\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # If no branch or branch doesn't exist, use the existing logic\n")
	yaml.WriteString("          if [ -z \"$BRANCH_NAME\" ]; then\n")
	yaml.WriteString("            echo \"Using current HEAD for patch generation\"\n")
	yaml.WriteString("            # Stage any unstaged files\n")
	yaml.WriteString("            git add -A || true\n")
	yaml.WriteString("            # Check if there are staged files to commit\n")
	yaml.WriteString("            if ! git diff --cached --quiet; then\n")
	yaml.WriteString("              echo \"Staged files found, committing them...\"\n")
	yaml.WriteString("              git commit -m \"[agent] staged files\" || true\n")
	yaml.WriteString("              echo \"Staged files committed\"\n")
	yaml.WriteString("            else\n")
	yaml.WriteString("              echo \"No staged files to commit\"\n")
	yaml.WriteString("            fi\n")
	yaml.WriteString("            # Check updated git status\n")
	yaml.WriteString("            echo \"Updated git status after committing staged files:\"\n")
	yaml.WriteString("            git status\n")
	yaml.WriteString("            # Show compact diff information between initial commit and HEAD (committed changes only)\n")
	yaml.WriteString("            echo '## Git diff' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '```' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            git diff --name-only \"$INITIAL_SHA\"..HEAD >> $GITHUB_STEP_SUMMARY || true\n")
	yaml.WriteString("            echo '```' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            # Check if there are any committed changes since the initial commit\n")
	yaml.WriteString("            if git diff --quiet \"$INITIAL_SHA\" HEAD; then\n")
	yaml.WriteString("              echo \"No committed changes detected since initial commit\"\n")
	yaml.WriteString("              echo \"Skipping patch generation - no committed changes to create patch from\"\n")
	yaml.WriteString("            else\n")
	yaml.WriteString("              echo \"Committed changes detected, generating patch...\"\n")
	yaml.WriteString("              # Generate patch from initial commit to HEAD (committed changes only)\n")
	yaml.WriteString("              git format-patch \"$INITIAL_SHA\"..HEAD --stdout > /tmp/aw.patch || echo \"Failed to generate patch\" > /tmp/aw.patch\n")
	yaml.WriteString("              echo \"Patch file created at /tmp/aw.patch\"\n")
	yaml.WriteString("            fi\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # Show patch info if it exists\n")
	yaml.WriteString("          if [ -f /tmp/aw.patch ]; then\n")
	yaml.WriteString("            ls -la /tmp/aw.patch\n")
	yaml.WriteString("            # Show the first 50 lines of the patch for review\n")
	yaml.WriteString("            echo '## Git Patch' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '```diff' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            head -50 /tmp/aw.patch >> $GITHUB_STEP_SUMMARY || echo \"Could not display patch contents\" >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '...' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '```' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("      - name: Upload git patch\n")
	yaml.WriteString("        if: always()\n")
	yaml.WriteString("        uses: actions/upload-artifact@v4\n")
	yaml.WriteString("        with:\n")
	yaml.WriteString("          name: aw.patch\n")
	yaml.WriteString("          path: /tmp/aw.patch\n")
	yaml.WriteString("          if-no-files-found: ignore\n")
}
